(define run1(lambda () (- (+ 3 5) 7)))
(define run2(lambda () (- (* (+ 8 5 4) 2) 25)))
(define run3(lambda () (- 10 (+ (* 3 5) (+ 2 (* 0 5))))))
(define run4(lambda () (* 5 (+ 4 (/ (+ (+ 10 10) (* 5 8)) (+ 10 2))))))
(define run5(lambda () (+ (/ (- (/ (* (+ 3 5) (+ 6 4)) 2) 5) 3) (+ (/ (+ (* 2 10) (* 5 4)) 2) (* 4 5)))))

(define RecursiveMultiply(
                          lambda (x y . z) (cond
                                             ((= x 0) 0)
                                             ((= y 0) 0)
                                             ((< x 0)
                                              (RecursiveMultiply (- x) (- y)))
                                             (else
                                              (+ y (RecursiveMultiply (- x 1) y)))
                                             )))

(define ReadAndMult(lambda ()
                     (let ((a (read)) (b (read)))
                        (if (and (number? a) (number? b))
                            (RecursiveMultiply a b)
                            )
                        )
                     )
  )

(define number-list?(lambda (x)
                      (if (not (= (length x) 0))
                          (if (and (number? (car x)) (number-list? (cdr x)))
                                    #t
                                    #f
                                 )
                          )
                     )
  )

(define sum-number-list(
                     lambda (x) 
                                 (if (and (list? x) (not (= (length x) 0))) 
                                     (if (number-list? x)
                                             (if (= (length x) 1)
                                                 (car x)
                                                 (+ (car x) (sum-number-list (cdr x)))
                                                 )
                                             #f
                                             )
                                     )     
                     )
  )

(define read-int-list(lambda ()
                       (let ((x (read)))
                         (if (and (not (char? x)) (number? x))
                             (append (list x) (read-int-list))
                             (list)
                             )
                         )
                       )
  )

(define PairOff(lambda(x y)
                 (cons x y)
                 )
  )

(define Combiner(lambda (x y)
                  (if (and (not (= (length x) 0)) (not (= (length y) 0)))
                      (append (list (PairOff (car x) (car y))) (Combiner (cdr x) (cdr y)))
                      (list)
                      )
                  )
  )

(define get-digit(lambda (x)
                   (if (>= x 10)
                       (list (remainder x 10))
                       (list x)
                       )
                   )
  )

(define make-digits-list(lambda (x)
                          (if (> x 9)
                              (append (get-digit x) (make-digits-list (quotient x 10)))
                              (list x)
                              )
                          )
  )

(define square (lambda (x) (* x x)))

(define happy? (lambda (x)
                 (if (= x 1)
                     #t
                     (if (= x 4)
                         #f
                         (happy? (sum-number-list (map square (make-digits-list x))))
                         )
                     )
                 )
  )

(display "Testing Convert and Run")
(newline)
(display "(run1) - answer should be 1 - tested: ")
(run1)
(display "(run2) - answer should be 9 - tested: ")
(run2)
(display "(run3) - answer should be -7 - tested: ")
(run3)
(display "(run4) - answer should be 45 - tested: ")
(run4)
(display "(run5) - answer should be 45 - tested: ")
(run5)

(display "Testing RecursiveMultiply")
(newline)
(display "(RecursiveMultiply 6 2) - expected 12 - got: ")
(RecursiveMultiply 6 2)
(display "(RecursiveMultiply -6 -2) - expected 12 - got: ")
(RecursiveMultiply -6 -2)
(display "(RecursiveMultiply 6 -2) - expected -12 - got: ")
(RecursiveMultiply 6 -2)
(display "(RecursiveMultiply -6 2) - expected -12 - got: ")
(RecursiveMultiply -6 2)

(display "Testing ReadAndMult")
(display "Input 6 5 -->")
(ReadAndMult)
(display "30 <-- correct answer")
(newline)

(display "Testing number-list?")(newline)
(display "(number-list? ‘(1 2 3 4)   - epxected #t - got: ")
(number-list? '(1 2 3 4))
(display "(number-list? ‘(1 2 (3) 4) - expected #f - got: ")
(number-list? '(1 2 (3) 4))
(display "(number-list? ‘(1 2 a 4)   - expected #f - got: ")
(number-list? '(1 2 a 4))

(newline)
(display "Testing sum-number-list")(newline)
(display "(sum-number-list '(1 2 3 4 5) - expected 15 - got: ")
(sum-number-list '(1 2 3 4 5))
(display "(sum-number-list '(1 (2)))    - expected #f - got: ")
(sum-number-list '(1 (2)))
(display "(sum-number-list '(a b c))    - expected #f - got: ")
(sum-number-list '(a b c))

(newline)
(display "Testing read-int-list")(newline)
(display "Input 1 2 3 4 5 q --> ")
(read-int-list)
(display "(1 2 3 4 5) <-- expected")(newline)(newline)
(display "Testing (sum-numberlist (read-int-list)")(newline)
(display "Input 1 2 3 4 5 q --> ")
(sum-number-list (read-int-list))
(display "15 <-- expected")


(newline)
(display "Testing PairOff & Combiner")(newline)
(display "(PairOff 1 'a) - expected (1 a) - got: ")
(PairOff 1 'a)
(display "(Combiner ‘(1 2 3) ‘(a b c)) - expected: ((1 a) (2 b) (3 c)) - got: ")
(Combiner '(1 2 3) '(a b c))


(newline)
(newline)
(display " o(^?^)o HAPPY NUMBER TEST o(;?;)o ")
(newline)
(display "Is 863 happy? (happy? 863) - expected: #t - got: ")
(happy? 863)
(display "Is 55562 happy? (happy? 55562) - expected #f - got: ")
(happy? 55562)